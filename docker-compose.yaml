x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL}

services:
  open-meteo-api:
    image: ghcr.io/open-meteo/open-meteo
    container_name: open-meteo-api
    ports:
      - "8080:8080"
    command: serve
    volumes:
      - data:/app/data
    restart: always
    environment:
      <<: *shared_environment

  open-meteo-sync:
    image: ghcr.io/open-meteo/open-meteo
    container_name: open-meteo-sync
    command: sync ${OPEN_METEO_MODELS} ${OPEN_METEO_VARIABLES} --past-days ${OPEN_METEO_MAX_AGE_DAYS} --repeat-interval ${OPEN_METEO_REPEAT_INTERVAL} --concurrent ${OPEN_METEO_CONCURRENT}
    volumes:
      - data:/app/data
    restart: always
    environment:
      <<: *shared_environment

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quartz-solar-forecast-api
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    working_dir: /app
    restart: always
    environment:
      <<: *shared_environment
    command: python api/main.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quartz-solar-forecast-frontend
    ports:
      - "8501:8501"
    volumes:
      - .:/app
    working_dir: /app
    restart: always
    environment:
      <<: *shared_environment
      FASTAPI_BASE_URL: ${FASTAPI_BASE_URL:-http://web:8000}
    command: streamlit run dashboards/dashboard_2/app.py
    depends_on:
      web:
        condition: service_healthy

volumes:
  data: